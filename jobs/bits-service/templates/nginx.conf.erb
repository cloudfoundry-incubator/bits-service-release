# deployment bits-service nginx.conf
user  vcap vcap;

error_log <%= p("bits-service.nginx.error_log_destination") %> <%= p("bits-service.nginx.error_log_level") %>;
pid       /var/vcap/sys/run/nginx_bits/nginx.pid;

events {
  worker_connections  8192;
  use epoll;
}

http {
  default_type  text/html;
  server_tokens off;

  log_format main  '<%= p("bits-service.nginx.access_log_format").chomp %>';
  log_format metrics '$request;$request_time;$bytes_sent';

  access_log <%= p("bits-service.nginx.access_log_destination") %> main;
  access_log <%= p("bits-service.nginx.metrics_log_destination") %> metrics;

  sendfile             on;  #enable use of sendfile()
  tcp_nopush           on;
  tcp_nodelay          on;  #disable nagel's algorithm

  keepalive_timeout  75 20; #inherited from router

  # Allow large uploads
  client_max_body_size <%= p("bits-service.max_body_size") %>;

  upstream bits_service {
    server unix:/var/vcap/sys/run/bits-service/bits-service.sock;
  }

  # Private endpoint
  server {
    listen 80;
    server_name <%= p("bits-service.private_endpoint").sub(%r{^http://}, '') %>;
    server_name_in_redirect off;

    access_log  <%= p("bits-service.nginx.private_access_log_destination") %> main;
    access_log <%= p("bits-service.nginx.metrics_log_destination") %> metrics;

    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>

    location /sign/ {
      auth_basic "Bits Service Signing";
      auth_basic_user_file signing_users;

      proxy_pass http://bits_service;
    }

    # local resource downloads
    location ~ "/(<%= p("bits-service.buildpacks.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>/buildpack_cache|<%= p("bits-service.packages.directory_key") %>)/\w{2}/\w{2}/.*" {
      internal;
      root /var/vcap/store/bits-service/;
      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;
    }

    location /buildpack_cache/entries {
      if ($request_method != PUT ) {
        proxy_pass http://bits_service;
        break;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.buildpack_cache.max_body_size") %>;
    }
    location /buildpacks {
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.buildpacks.max_body_size") %>;
    }
    location /packages {
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.packages.max_body_size") %>;
    }
    location /droplets {
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.droplets.max_body_size") %>;
    }
    location /app_stash/entries {
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.app_stash.max_body_size") %>;
    }

    location /app_stash {
      proxy_pass http://bits_service;
    }

    # Pass altered request body to a backend
    location @bits_service {
      proxy_pass http://unix:/var/vcap/sys/run/bits-service/bits-service.sock;
    }

    location /nginx_status {
      stub_status on;
      access_log  /var/vcap/sys/log/nginx_bits/nginx_status.access.log main;
      allow 127.0.0.1;
      deny all;
    }
  }

  # Public endpoint
  server {
    listen 80;
    server_name <%= p("bits-service.public_endpoint").sub(%r{^http://}, '') %>;
    server_name_in_redirect off;

    access_log  <%= p("bits-service.nginx.public_access_log_destination") %> main;
    access_log <%= p("bits-service.nginx.metrics_log_destination") %> metrics;

    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>

    # local resource downloads
    location ~ "/(<%= p("bits-service.buildpacks.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>|<%= p("bits-service.packages.directory_key") %>)/\w{2}/\w{2}/.*" {
      internal;
      root /var/vcap/store/bits-service/;
      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;
    }

    # Pass altered request body to a backend
    location @bits_service {
      proxy_pass http://unix:/var/vcap/sys/run/bits-service/bits-service.sock;
    }

    location /signed/ {
      dav_methods PUT;
      create_full_put_path on;

      if ( $request_method !~ ^(GET|HEAD|PUT)$ ) {
        return 405;
      }

      secure_link $arg_md5,$arg_expires;
      secure_link_md5 "$secure_link_expires$uri <%= p("bits-service.secret") %>";

      if ($secure_link = "") {
        return 403;
      }

      if ($secure_link = "0") {
        return 410;
      }

      rewrite ^\/signed(.*)$ $1; # Remove "/signed" prefix from URI

      if ( $request_method !~ ^(PUT)$ ) {
        proxy_pass http://bits_service;
      }
      # PUT

      include "location_stub.conf";

      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;

      break;
    }
  }

  # catch-all
  server {
    listen      80	default_server;
    return      400;
  }
}
